import { Document, Page, View, Text, StyleSheet, Svg, Path, G } from "@react-pdf/renderer";

const styles = StyleSheet.create({
  page: { padding: 24, fontSize: 11, fontFamily: "Helvetica" },
  headerRow: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 12 },
  header: { marginBottom: 0 },
  title: { fontSize: 18, marginBottom: 6 },
  meta: { fontSize: 10, color: "#666", marginBottom: 8 },
  riskBox: { width: 350, padding: 12, borderRadius: 6, borderWidth: 1, borderColor: "#e6e6e6", alignItems: "center" },
  gaugeWrap: { flexDirection: "row", alignItems: "center" },
  gaugeSvg: { marginRight: 10 },
  gaugeLegendCol: { flexDirection: "column", marginLeft: 8 },
  riskNumber: { fontSize: 28, fontWeight: 700, marginTop: 6, marginBottom: 4 },
  riskLabel: { fontSize: 10, color: "#444" },
  riskBarWrap: { width: "100%", height: 10, borderRadius: 6, overflow: "hidden", marginTop: 6 },
  riskBar: { height: 10 },
  legendWrap: { marginTop: 8 },
  legendItem: { flexDirection: "row", alignItems: "center", marginBottom: 4 },
  legendSwatch: { width: 10, height: 10, borderRadius: 2, marginRight: 8 },
  legendText: { fontSize: 10, color: "#444" },
  sectionTitle: { fontSize: 13, marginTop: 8, marginBottom: 4, fontWeight: 700 },
  bullet: { marginLeft: 6, marginBottom: 2 },
  listItem: { flexDirection: "row", marginBottom: 2 },
  dot: { width: 6, height: 6, borderRadius: 3, backgroundColor: "#333", marginRight: 6, marginTop: 6 },
  footer: { position: "absolute", fontSize: 9, bottom: 12, left: 24, right: 24, textAlign: "center", color: "#666" },
});

function normalizeToSections(parsed) {
  if (!parsed) return [{ Summary: ["No data"] }];
  if (Array.isArray(parsed) && parsed.length && typeof parsed[0] === "object" && !Array.isArray(parsed[0])) {
    return parsed.map(obj => {
      const out = {}; 
      for (const [k, v] of Object.entries(obj)) out[k] = Array.isArray(v) ? v.map(String) : [String(v)];
      return out;
    });
  }
  if (Array.isArray(parsed) && parsed.every(p => typeof p === "string")) return [{ Summary: parsed }];
  if (parsed && typeof parsed === "object") {
    return Object.entries(parsed).map(([k, v]) => ({ [k]: Array.isArray(v) ? v.map(String) : [String(v)] }));
  }
  return [{ Summary: [String(parsed)] }];
}



export default function ReportDocument({ summary, title = "Docspect AI Report", riskScore = null }) {
  const sections = normalizeToSections(summary);

  const score = Number.isFinite(riskScore) ? Math.max(0, Math.min(100, Math.round(riskScore))) : 56;

  function polarToCartesian(cx, cy, r, angleDeg) {
    const angleRad = (angleDeg + 180) * Math.PI / 180.0;
    return { x: cx + r * Math.cos(angleRad), y: cy + r * Math.sin(angleRad) };
  }
  function describeArc(cx, cy, r, startAngle, endAngle) {
    const start = polarToCartesian(cx, cy, r, endAngle);
    const end = polarToCartesian(cx, cy, r, startAngle);
    const largeArcFlag = Math.abs(endAngle - startAngle) <= 180 ? 0 : 1;
    return `M ${start.x} ${start.y} A ${r} ${r} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`;
  }

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.headerRow}>
          <View style={styles.header}>
            <Text style={styles.title}>{title}</Text>
            <Text style={styles.meta}>Generated by Docspect.AI</Text>
          </View>
          <View style={styles.riskBox}>
            <View style={styles.gaugeWrap}>
              <Svg width={220} height={120} style={styles.gaugeSvg} viewBox={`0 0 220 120`}>
                {
                  (() => {
                    const cx = 110;
                    const cy = 110; 
                    const r = 90;
                    const segments = [
                      { from: 0, to: 20, color: "#2ECC71" },
                      { from: 20, to: 40, color: "#F1C40F" },
                      { from: 40, to: 60, color: "#F39C12" },
                      { from: 60, to: 80, color: "#E67E22" },
                      { from: 80, to: 100, color: "#E74C3C" },
                    ];

                    const gap = 2; 
                    const segs = segments.map((s, i) => {
                      const a1 = 180 * (s.from / 100) + gap / 2;
                      const a2 = 180 * (s.to / 100) - gap / 2;
                      if (a2 > a1) {
                        const d = describeArc(cx, cy, r, a1, a2);
                        return <Path key={`seg-${i}`} d={d} stroke={s.color} strokeWidth={20} fill="none" strokeLinecap="round" />;
                      }
                      return null;
                    }).filter(Boolean);

                    const ticks = [0, 20, 40, 60, 100];
                    const ticksEl = ticks.map((t, i) => {
                      const angle = 180 * (t / 100);
                      const outer = polarToCartesian(cx, cy, r + 8, angle);
                      const inner = polarToCartesian(cx, cy, r - 18, angle);
                      const d = `M ${outer.x} ${outer.y} L ${inner.x} ${inner.y}`;
                      const labelPos = polarToCartesian(cx, cy, r + 32, angle);
                      return (
                        <G key={`tick-${i}`}>
                          <Path d={d} stroke="#cfcfcf" strokeWidth={2} fill="none" strokeLinecap="round" />
                          <Text x={labelPos.x} y={labelPos.y} style={{ fontSize: 9, color: "#666" }} textAnchor={angle < 90 ? "end" : angle > 90 ? "start" : "middle"}>{String(t) + "%"}</Text>
                        </G>
                      );
                    });

                    const centerAngle = 180 * (score / 100);
                    const tip = polarToCartesian(cx, cy, r - 36, centerAngle);
                    const needle = `M ${cx} ${cy} L ${tip.x} ${tip.y}`;
                    const outerCircle = `M ${cx - 8} ${cy} a 8 8 0 1 0 16 0 a 8 8 0 1 0 -16 0`;
                    const innerCircle = `M ${cx - 4} ${cy} a 4 4 0 1 0 8 0 a 4 4 0 1 0 -8 0`;

                    return (
                      <>
                        {segs}
                        {ticksEl}
                        <Path d={needle} stroke="#333" strokeWidth={6} strokeLinecap="round" fill="none" />
                        <Path d={outerCircle} fill="#333" />
                        <Path d={innerCircle} fill="#fff" />
                      </>
                    );
                  })()
                }
              </Svg>

              <View style={styles.gaugeLegendCol}>
                <Text style={{ fontSize: 10, color: "#666" }}>Document Risk</Text>
                <Text style={styles.riskNumber}>{score}%</Text>
                <Text style={styles.riskLabel}>Higher = more risky</Text>
              </View>
            </View>

            <View style={styles.legendWrap}>
              <View style={styles.legendItem}>
                <View style={[styles.legendSwatch, { backgroundColor: "#2ECC71" }]} />
                <Text style={styles.legendText}>Below 40 — Generally safe</Text>
              </View>
              <View style={styles.legendItem}>
                <View style={[styles.legendSwatch, { backgroundColor: "#F1C40F" }]} />
                <Text style={styles.legendText}>40–60 — Use caution</Text>
              </View>
              <View style={styles.legendItem}>
                <View style={[styles.legendSwatch, { backgroundColor: "#E74C3C" }]} />
                <Text style={styles.legendText}>Above 60 — Risky</Text>
              </View>
            </View>
          </View>
        </View>

        {sections.map((section, sidx) =>
          Object.entries(section).map(([heading, items], idx) => (
            <View key={`${sidx}-${idx}`} wrap={false}>
              <Text style={styles.sectionTitle}>{heading}</Text>
              {items.map((it, i) => (
                <View key={`${sidx}-${idx}-item-${i}`} style={styles.listItem}>
                  <View style={styles.dot} />
                  <Text style={styles.bullet}>{String(it)}</Text>
                </View>
              ))}
            </View>
          ))
        )}

        <Text style={styles.footer}>Docspect.AI — Confidential</Text>
      </Page>
    </Document>
  );
}
