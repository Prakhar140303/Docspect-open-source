import { Document, Page, View, Text, StyleSheet } from "@react-pdf/renderer";

const styles = StyleSheet.create({
  page: { padding: 24, fontSize: 11, fontFamily: "Helvetica" },
  headerRow: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 12 },
  header: { marginBottom: 0 },
  title: { fontSize: 18, marginBottom: 6 },
  meta: { fontSize: 10, color: "#666", marginBottom: 8 },
  riskBox: { width: 160, padding: 8, borderRadius: 6, borderWidth: 1, borderColor: "#e6e6e6", alignItems: "center" },
  riskNumber: { fontSize: 28, fontWeight: 700, marginTop: 6, marginBottom: 4 },
  riskLabel: { fontSize: 10, color: "#444" },
  riskBarWrap: { width: "100%", height: 10, borderRadius: 6, overflow: "hidden", marginTop: 6 },
  riskBar: { height: 10 },
  sectionTitle: { fontSize: 13, marginTop: 8, marginBottom: 4, fontWeight: 700 },
  bullet: { marginLeft: 6, marginBottom: 2 },
  listItem: { flexDirection: "row", marginBottom: 2 },
  dot: { width: 6, height: 6, borderRadius: 3, backgroundColor: "#333", marginRight: 6, marginTop: 6 },
  footer: { position: "absolute", fontSize: 9, bottom: 12, left: 24, right: 24, textAlign: "center", color: "#666" },
});

function normalizeToSections(parsed) {
  if (!parsed) return [{ Summary: ["No data"] }];
  if (Array.isArray(parsed) && parsed.length && typeof parsed[0] === "object" && !Array.isArray(parsed[0])) {
    return parsed.map(obj => {
      const out = {};
      for (const [k, v] of Object.entries(obj)) out[k] = Array.isArray(v) ? v.map(String) : [String(v)];
      return out;
    });
  }
  if (Array.isArray(parsed) && parsed.every(p => typeof p === "string")) return [{ Summary: parsed }];
  if (parsed && typeof parsed === "object") {
    return Object.entries(parsed).map(([k, v]) => ({ [k]: Array.isArray(v) ? v.map(String) : [String(v)] }));
  }
  return [{ Summary: [String(parsed)] }];
}

function colorForScore(score) {
  if (score <= 40) return "#2ECC71";
  if (score <= 60) return "#F1C40F";
  if (score <= 80) return "#E67E22";
  return "#E74C3C";
}

export default function ReportDocument({ summary, title = "Docspect AI Report", riskScore = null }) {
  const sections = normalizeToSections(summary);

  const score = Number.isFinite(riskScore) ? Math.max(0, Math.min(100, Math.round(riskScore))) : 56;
  const color = colorForScore(score);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.headerRow}>
          <View style={styles.header}>
            <Text style={styles.title}>{title}</Text>
            <Text style={styles.meta}>Generated by Docspect.AI</Text>
          </View>

          <View style={styles.riskBox}>
            <Text style={{ fontSize: 10, color: "#888" }}>Document Risk Score</Text>
            <Text style={styles.riskNumber}>{score}</Text>
            <Text style={styles.riskLabel}>Higher = more risky</Text>
            <View style={styles.riskBarWrap}>
              <View style={[styles.riskBar, { width: `${score}%`, backgroundColor: color }]} />
            </View>
          </View>
        </View>

        {sections.map((section, sidx) =>
          Object.entries(section).map(([heading, items], idx) => (
            <View key={`${sidx}-${idx}`} wrap={false}>
              <Text style={styles.sectionTitle}>{heading}</Text>
              {items.map((it, i) => (
                <View key={`${sidx}-${idx}-item-${i}`} style={styles.listItem}>
                  <View style={styles.dot} />
                  <Text style={styles.bullet}>{String(it)}</Text>
                </View>
              ))}
            </View>
          ))
        )}

        <Text style={styles.footer}>Docspect.AI â€” Confidential</Text>
      </Page>
    </Document>
  );
}
